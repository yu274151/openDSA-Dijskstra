{
    "translations": {
      "en": {
        "q2": {
          "type": "multiple",
          "description": "Last module we learned how to convert any Regular Grammar to NFA.",
          "question":"[T/F] This means that Regular Languages are equivalent to Regular Grammars",
          "answer": "False, we still need to prove that we can convert any NFA to Regular Grammars",
          "choices": ["True", "False, we still need to prove that we can convert any NFA to Regular Grammars"]
        },
        "q6": {
          "type": "multiple",
          "description": "The process is pretty much the same as when we made an NFA from RRG:",
          "question":"What do we mean by RRG?",
          "answer": "Right Regular Grammar",
          "choices": ["Regular Expression", "Right Regular Grammar", "Left Regular Grammar", "Regular Grammar"]
        },
        "q7": {
          "type": "multiple",
          "description": "The process is pretty much the same as when we made an NFA from RRG:<br>    Each DFA state gets a non-terminal.",
          "question":"How many Variables we need for the NFA on the left?",
          "answer": "2",
          "choices": ["1", "2", "3", "4"]
        },
        "q8": {
          "type": "multiple",
          "description": "The process is pretty much the same as when we made an NFA from RRG:<br>    Each DFA state gets a non-terminal.<br>    Each transition gets a production rule.",
          "question":"How many production rules we will create?",
          "answer": "3",
          "choices": ["1", "2", "3", "4"]
        },
        "q10": {
          "type": "multiple",
          "description": "Let us convert the NFA to RRG.",
          "question":"What is the start variable?",
          "answer": "Q0, because it is the start state.",
          "choices": ["Q0, because it is the start state.", "Q1", "S"]
        },
        "q11": {
          "type": "multiple",
          "description": "Let us convert the NFA to RRG.",
          "question":"What is the production rule equivalent to the transition $\\delta(q_0,a)=q_1$?",
          "answer": "$Q_0 \\rightarrow aQ_1$",
          "choices": ["$Q_0 \\rightarrow aQ_1$", "$Q_1 \\rightarrow bQ_1$", "$Q_1 \\rightarrow aQ_0$"]
        },
        "q12": {
          "type": "multiple",
          "description": "Let us convert the NFA to RRG.",
          "question":"What is the production rule equivalent to the transition $\\delta(q_1,b)=q_1$?",
          "answer": "$Q_1 \\rightarrow bQ_1$",
          "choices": ["$Q_0 \\rightarrow aQ_1$", "$Q_1 \\rightarrow bQ_1$", "$Q_1 \\rightarrow aQ_0$"]
        },
        "q13": {
          "type": "multiple",
          "description": "Let us convert the NFA to RRG.",
          "question":"What is the production rule equivalent to the transition $\\delta(q_1,a)=q_0$?",
          "answer": "$Q_1 \\rightarrow aQ_0$",
          "choices": ["$Q_0 \\rightarrow aQ_1$", "$Q_1 \\rightarrow bQ_1$", "$Q_1 \\rightarrow aQ_0$"]
        },
        "q14": {
          "type": "multiple",
          "description": "Let us convert the NFA to RRG.",
          "question":"Which state(s) are the final state(s)?",
          "answer": "$q_1$",
          "choices": ["$q_1$", "$q_0$"]
        },
        "q15": {
          "type": "select",
          "description": "Let us convert the NFA to RRG.",
          "question":"What should we do to after we knew that $q_1$ is the final state is to add rule: $Q_1 \\rightarrow \\lambda$",
          "answer": "True",
          "choices": []
        },
        "q16": {
          "type": "multiple",
          "description": "Let us convert the NFA to RRG.",
          "question":"Are we done?",
          "answer": "Yes",
          "choices": ["Yes", "No"]
        },
        "q17": {
          "type": "select",
          "description": "We did it. Now we proved that any NAF can be converted to Right Regular Grammar.",
          "question":"This means that Regular Grammare are equivalent to Regular Languages",
          "answer": "True",
          "choices": []
        }
      }
    }
  }
    